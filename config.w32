ARG_ENABLE("zstd", "zstd support", "yes");

if (PHP_ZSTD != "no") {
  if (MODE_PHPIZE) {
    // PHPIZE
    if (CHECK_HEADER_ADD_INCLUDE("ext/apcu/apc_serializer.h", "CFLAGS_ZSTD", PHP_DIR + "\\include")) {
      AC_DEFINE("HAVE_APCU_SUPPORT", 1, "APCu support");
    }
  } else {
    // in-tree build
    if (get_define("HAVE_APCU")) {
      AC_DEFINE("HAVE_APCU_SUPPORT", 1, "APCu support");
    }
  }

  if (CHECK_LIB("libzstd.lib;zstd.lib", "zstd", PHP_ZSTD) &&
      CHECK_HEADER_ADD_INCLUDE("zstd.h", "CFLAGS_ZSTD", PHP_ZSTD)) {
    EXTENSION("zstd", "zstd.c", null, "/DZEND_ENABLE_STATIC_TSRMLS_CACHE=1");
  } else {
    EXTENSION("zstd", "zstd.c", null, "/DZEND_ENABLE_STATIC_TSRMLS_CACHE=1");

    ADD_SOURCES("zstd/lib/common", "debug.c entropy_common.c error_private.c fse_decompress.c pool.c threading.c xxhash.c zstd_common.c", "zstd");
    ADD_SOURCES("zstd/lib/compress", "fse_compress.c hist.c huf_compress.c zstd_compress.c zstd_compress_literals.c zstd_compress_sequences.c zstd_compress_superblock.c zstd_double_fast.c zstd_fast.c zstd_lazy.c zstd_ldm.c zstd_opt.c zstd_preSplit.c zstdmt_compress.c", "zstd");
    ADD_SOURCES("zstd/lib/decompress", "huf_decompress.c zstd_ddict.c zstd_decompress.c zstd_decompress_block.c", "zstd");

    ADD_FLAG("CFLAGS_ZSTD", " /I" + configure_module_dirname + " /I" + configure_module_dirname + "/zstd/lib/common" + " /I" + configure_module_dirname + "/zstd/lib");
  }
}
